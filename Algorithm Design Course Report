算法设计报告

分治
1. 题目：洛谷P1498 
题目描述
自从到了南蛮之地，孔明不仅把孟获收拾的服服帖帖，而且还发现了不少少数民族的智慧，他发现少数民族的图腾往往有着一种分形的效果，在得到了酋长的传授后，孔明掌握了不少绘图技术，但唯独不会画他们的图腾，于是他找上了你的爷爷的爷爷的爷爷的爷爷……帮忙，作为一个好孙子的孙子的孙子的孙子……你能做到吗？
输入格式
每个数据一个数字，表示图腾的大小（此大小非彼大小） n<=10
输出格式
这个大小的图腾
输入输出样例
输入：
2
输出：
   /\
  /__\
 /\  /\
/__\/__\
数据范围
对于所有数据，


2.分析
分治：由此题可发现，输出结果是具有形态相似这个特性的，最终的图腾是由与之相似的更小的图腾组成，我们找到最小的图腾
  /\                     //这也是n=1时的图腾
 /__\   
   
   /\
  /__\
 /\  /\                   //我们把n=1时的图腾向右，向上复制一遍就得到n=2时的图腾
/__\/__\
以此类推，因为n-1规模图腾可以生成n规模的图腾，我们可以用分治法解决更大规模的图腾，并把n=1的基础图腾预先输入。
3.证明
通过题目的描述，我们很快便能发现规律，将原始图腾不断的向下，向右复制，就可以得到大一号的图腾，直到得到我们需要的大小的图腾。
4.代码：
#include<iostream>
#include<cstring>
using namespace std;
int n;
char a[3000][3000];
int h=2,w=4;//h是高,w是宽
int main(){
    cin>>n;
    memset(a,' ',sizeof(a));
    a[1][1]=a[1][4]=' ';
    a[1][2]=a[2][1]='/';
    a[1][3]=a[2][4]='\\';//向右的划线有特殊的含义
    a[2][2]=a[2][3]='_';
    for(int i=1;i<n;i++){
        //向下和向右
        for(int j=1;j<=h;j++){
            for(int k=1;k<=w;k++){
                a[j+h][k]=a[j+h][k+w]=a[j][k];
                a[j][k]=' ';//把上面的清掉
            }
        }
        //向上
        for(int j=1;j<=h;j++){
            for(int k=1;k<=w;k++){
                a[j][k+w/2]=a[j+h][k];
            }
        }
        w*=2;h*=2;
        //刷新完成一次
    }
    for(int i=1;i<=h;i++){
        for(int j=1;j<=w;j++){
            cout<<a[i][j];
        }
        cout<<endl;
    }
    return 0;
}

5.复杂度分析
每循环一次，w、h自乘2，计算过后，最终的时间复杂度为4^n)。

动态规划
1.题目：洛谷 P1025 数的划分
题目描述
将整数 n 分成 k 份，且每份不能为空，任意两个方案不相同（不考虑顺序）。
例如：n=7，k=3，下面三种分法被认为是相同的。
1,1,5
1,5,1
5,1,1
问有多少种不同的分法。
输入格式
n,k(6<n<=200,2<=k<=6)
输出格式
共一行，包含一个数值，表示不同的分法
输入样例：
7 3
输出样例：
4

2.分析
从题面的描述上看就很像动态规划题。
状态表示： 表示i分成x个非空的数的方案数
显然i<x时，=0，i=x时， =1
剩下的情况我们分情况讨论：
①有1的 ②没有1的
第一种情况，方案数为 f[i-1][x-1]
第二种情况，方案数为 f[i-x][x] (此时 i 必须大于 x)
状态转移
f[i][x]=f[i-1][x-1]+f[i-x][x]
3.证明
显然，状态转移方程把合法方案的集合分成了不重不漏的两部分：即划分中有1或无1的情况。这样就可以枚举出所有可能成为最优方案的合法方案，得到最优解。
4.代码：
#include<iostream>
using namespace std;
int n,k,f[201][7];  //f[k][x] k 分成 x 份 ={f[k-1][x-1],f[k-x][x]}
int main()
{
    cin >> n >> k;
    for (int i=1;i<=n;i++)
    {
        f[i][1]=1;f[i][0]=1;
    }
    for (int x=2;x<=k;x++)
    {
        f[1][x]=0;
        f[0][x]=0;
    }  // 边界，为了防止炸，我把有0的也处理了
    for (int i=2;i<=n;i++)
    {
        for (int x=2;x<=k;x++)
        {
            if (i>x)
                f[i][x]=f[i-1][x-1]+f[i-x][x];
            else
                f[i][x]=f[i-1][x-1];
        }
    }
    cout<<f[n][k]<<endl;
    return 0;
}
5.复杂度分析
代码主体部分for循环嵌套，外层是n,内层是k,所以循环次数n*k，则总时间复杂度是)


贪心

1.题目：洛谷 P1478 陶陶摘苹果升级版
题目描述
又是一年秋季时，陶陶家的苹果树结了 n 个果子。陶陶又跑去摘苹果，这次他有一个 a 公分的椅子。当他手够不着时，他会站到椅子上再试试。
这次与 NOIp2005 普及组第一题不同的是：陶陶之前搬凳子，力气只剩下 s 了。当然，每次摘苹果时都要用一定的力气。陶陶想知道在 s<0 之前最多能摘到多少个苹果。
现在已知 n 个苹果到达地上的高度 xi​，椅子的高度 a，陶陶手伸直的最大长度 b，陶陶所剩的力气s，陶陶摘一个苹果需要的力气 yi​，求陶陶最多能摘到多少个苹果。
输入格式
第 1 行：两个数 苹果数 n，力气 s。
第 2 行：两个数 椅子的高度 a，陶陶手伸直的最大长度 b。
第 3 行~第 3+n−1 行：每行两个数 苹果高度 xi​，摘这个苹果需要的力气 yi​。
输出格式
只有一个整数，表示陶陶最多能摘到的苹果数。
输入样例：
8 15
20 130
120 3
150 2
110 7
180 1
50 8
200 0
140 3
120 2
输出样例：
4
数据范围
对于 100% 的数据，n≤5000, a≤50, b≤200, s≤1000,xi​≤280, yi​≤100。

2.分析
在这个题里，所有苹果费力气也就是占背包空间不同，但是价值都是1。背包问题主要是为了解决拿得多却不一定价值最大，拿价值大的却可能装不下其他有价值的东西而使人陷入两难才被发明的算法。对于价值相同体积却不同的物品，我们每次只取体积最小的，就能在取得当前价值的情况下，最大化剩余空间，从而拿更多苹果,由此分析，运用贪心算法比动态规划算法更加好，是最优解。
 
3.证明：
在能摘到苹果的前提下，我们每次先摘耗费力气最小的苹果，直到没有足够的力气去摘下一个苹果时，停止。因为此题并不涉及到苹果的价值，所有的苹果可以理解成是一样的，只有摘他们消耗的力气不同，所以显然我们先摘耗费最小的苹果是最优解。

4.代码
#include<iostream>
#include<algorithm>
using namespace std;
int n,s,a,b,x_,y_,can,rest,ans;
struct apple{
    int xi,yi;
}ap[50005];
int cmp(apple x,apple y)
{
    return x.yi<y.yi;
}
int main()
{
    cin>>n>>s>>a>>b;
    for(int i=1;i<=n;i++)
    {
        cin>>x_>>y_;
        if(x_<=a+b)
        {
            can++;
            ap[can].xi=x_;
            ap[can].yi=y_;
        }
    }
    sort(ap+1,ap+can+1,cmp);
    rest=s;
    ans=0;
    for(int i=1;rest>=ap[i].yi&&i<=can;i++)
    {
        ans++;
        rest-=ap[i].yi;
    }
    cout<<ans<<endl;
    return 0;
}

5.复杂度分析
该题算法为典型的贪心算法，复杂度上界取决于排序。STL中sort的时间复杂度为，因此本题的时间复杂度为 


回溯
1.题目：洛谷P1378 油滴扩展
题目描述
在一个长方形框子里，最多有个相异的点，在其中任何一个点上放一个很小的油滴，那么这个油滴会一直扩展，直到接触到其他油滴或者框子的边界。必须等一个油滴扩展完毕才能放置下一个油滴。那么应该按照怎样的顺序在这 个点上放置油滴，才能使放置完毕后所有油滴占据的总体积最大呢？（不同的油滴不会相互融合）
注：圆的面积公式，其中 为圆的半径。
输入格式
第一行，一个整数 。
第二行，四个整数，表示长方形边框一个顶点及其对角顶点的坐标。
接下来  行，第 行两个整数，表示盒子内第个点的坐标。
输出格式
一行，一个整数，长方形盒子剩余的最小空间（结果四舍五入输出）。
输入输出样例
输入 #1
2
20 0 10 10
13 3
17 7
输出 #1
50
数据范围
对于全部数据，，坐标范围在  内。

2.分析
首先，观察范围，n最大只有6。而题目中又问一种可行的方法，那么直接用生成全排列的搜索方式来枚举不同的方法并不断更新最大值即可。
搜索时，用长方形框子的四条边和之前其他的油滴的位置来找到最大的扩散半径深搜，并且需要注意一下如果存在一个油滴使得此时放置的油滴圆心与该油滴圆心距离小于该油滴扩散半径，那么就说明此时放置的油滴位置已被覆盖，半径设为0。
3.证明
回溯法就是暴力搜索，正确性无需证明，只需将具体实现的细节做好即可AC。

4.代码
#include<iostream>
#include<cstdio>
#include<climits>
#include<algorithm>
#include<cmath>
using namespace std;
const double pi=3.141592;
int x[100],y[100],vis[100];
double r[100];
double ans=0;
int n;
double x1,x2,y3,y2;
double dis(int xx,int yy,int xx1,int yy1)
{
    return sqrt(pow((xx-xx1),2)+pow((yy-yy1),2));
}//两点距
double minn(int k)
{
    for(int i=1;i<=n;i++)
    {
        if(i!=k&&vis[i]==1)//不是自己且已经访问过的点
            if(r[i]>dis(x[i],y[i],x[k],y[k])) return 0;
    }
    //判断该点坐标是否已被油滴覆盖，是则将该点半径设为零。
    double dist;
    double ans=min(min(abs(x[k]-x1),abs(x[k]-x2)),min(abs(y[k]-y3),abs(y[k]-y2)));
    //先取该点到边界的最小距离。
    for(int i=1;i<=n;i++)
    {
        if(i!=k&&vis[i]==1)
        {
            dist=dis(x[i],y[i],x[k],y[k])-r[i];
            ans=min(ans,dist);
        }
    }
    //枚举每个已存在的油滴，更新最小值。
    return ans;
}
void dfs(int k,double res)
{
    if(k==n)
    {
        ans=max(ans,res);
        return;
    }
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            r[i]=minn(i);
            vis[i]=1;
            dfs(k+1,res+pi*r[i]*r[i]);
            vis[i]=0;
            r[i]=0;
        }
    }
}

int main()
{
    scanf("%d",&n);
    scanf("%lf%lf%lf%lf",&x1,&y3,&x2,&y2);//接触到其他油滴或者边界会立刻停止
    int s=abs(x1-x2)*abs(y3-y2);
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&x[i],&y[i]);
    }
    dfs(0,0);
    cout<<int(s-ans+0.5);
    return 0;
}

5.复杂度分析
搜索的复杂度：类似枚举全排列，复杂度为
搜索时辅助判断函数minn的复杂度：
因此总的时间复杂度为

分支限界

1.题目：洛谷5738 
题目描述
Farmer John 最近为了扩张他的牛奶产业帝国而收购了一个新的农场。这一新的农场通过一个管道网络与附近的小镇相连，FJ 想要找出其中最合适的一组管道，将其购买并用来将牛奶从农场输送到小镇。
这个管道网络可以用 N 个接合点（管道的端点）来描述，将其编号为 1 …N。接合点 1表示 FJ 的农场，接合点 N 表示小镇。有 M 条双向的管道，每条连接了两个接合点。使用第 i 条管道需要 FJ 花费 ci​ 美元购入，可以支持每秒 fi​ 升牛奶的流量。
FJ 想要购买一条管道组成一条单一路径，路径的两端点分别为接合点 1 和 N。这条路径的花费等于路径上所有管道的费用之和。路径上的流量等于路径上所有管道的最小流量（因为这是沿这条路径输送牛奶的瓶颈）。FJ 想要最大化路径流量与路径花费之比。保证存在从 1 到 N之间的路径。
样例输入
3 2
2 1 2 4
2 3 5 3
样例输出
428571

2.分析
有两个条件，考虑先枚举 f。既然要使分母 ∑ci​ 最小，那就相当于以 c 为边权跑最短路，于是我们可以跑 dijkstra 或 spfa。不过为了达到枚举 f 起的限制作用，我们在每次松弛操作之前，要先判断这条边的限制是否大于 f。否则不把这条边计算的最短路中，因为它不满足当前限制。跑完最短路更新答案即可。

3.证明
本题实现分支限界法的方式为堆优化的dijkstra算法，本质是暴力枚举，正确性无需证明，只需将具体实现的细节做好即可AC。

4.代码
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;

#define INF 0x7f7f7f7f
const int MAXN=3005;
int n,m,ans;
struct node
{
    int to,cost,limit;
    bool operator<(const node& a)const
    {
        return cost>a.cost;//方向别反了
    }
};
vector<node> edge[MAXN];
int dis[MAXN],limit[MAXN];
bool visit[MAXN];

void input(void)
{
    cin>>n>>m;
    for(int i=1;i<=m;i++)
    {
        int a,b,x;
        cin>>a>>b>>x>>limit[i];
        edge[a].push_back(node{b,x,limit[i]});//无向图
        edge[b].push_back(node{a,x,limit[i]});
    }
}

int dijkstra(const int limit)
{
    priority_queue<node> q;//记得清空
    memset(visit,false,sizeof(visit));
    memset(dis,INF,sizeof(dis));
    dis[1]=0;
    q.push(node{1,0,limit});
    while(!q.empty())//模板
    {
        const int u=q.top().to;
        q.pop();
        if(visit[u])
         continue;
        visit[u]=true;
        for(auto v:edge[u])
         if(v.limit>=limit && dis[v.to]>dis[u]+v.cost)
         {//注意限制
             dis[v.to]=dis[u]+v.cost;
             q.push(node{v.to,dis[v.to],limit});
         }
    }
    return dis[n];
}

int main()
{
    input();
    for(int i=1;i<=m;i++)//枚举 m 次而非 n 次
     ans=max(ans,limit[i]*int(1e6)/dijkstra(limit[i]));//更新答案
    cout<<ans<<endl;
    return 0;
}


5.复杂度分析
使用堆优化的 dijkstra，时间复杂度约O(n^2logn)。
